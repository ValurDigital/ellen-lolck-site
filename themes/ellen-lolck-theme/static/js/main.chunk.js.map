{"version":3,"file":"static/js/main.chunk.js","sources":["/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/App.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/components/Navigation/Navigation.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/components/Navigation/context/Context.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/components/Navigation/context/Provider.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/components/SeoHelmet.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/context/Pages/Context.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/context/Pages/Provider.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/index.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/serviceWorker.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/utils/api/constants.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/utils/createAction.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/views/FrontPage/FrontPage.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/views/Page/Page.js","/Users/villadsvalur/Developer/ValurDigital/ellen-lolck-site/themes/ellen-lolck-theme/react-src/src/views/PageNotFound/PageNotFound.js"],"sourcesContent":["import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport NavigationProvider from \"./components/Navigation/context/Provider\";\nimport PageProvider from \"./context/Pages/Provider\";\nimport SeoHelmet from \"./components/SeoHelmet\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport FrontPage from \"./views/FrontPage/FrontPage\";\nimport Page from \"./views/Page/Page\";\nimport PageNotFound from \"./views/PageNotFound/PageNotFound\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <NavigationProvider>\n        <Navigation />\n        <PageProvider>\n          <Switch>\n            <Route path=\"/ellen-lolck/\" component={FrontPage} exact />\n            <Route path=\"/ellen-lolck/:slug\" component={Page} />\n            <Route path=\"*\" component={PageNotFound} />\n          </Switch>\n        </PageProvider>\n      </NavigationProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport NavigationContext from \"./context/Context\";\n\nconst Navigation = () => {\n  const { menuLinks } = useContext(NavigationContext);\n  if (menuLinks) {\n    return (\n      <div>\n        {menuLinks.map((link) => (\n          <Link\n            key={link.slug}\n            className={link.classes}\n            to={`/ellen-lolck/${link.slug}`}\n          >\n            {link.title}\n          </Link>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\n// Navigation.defaultProps = {};\n\nNavigation.propTypes = {};\n\nexport default Navigation;\n","import { createContext } from \"react\";\n\nconst NavigationContext = createContext();\n\nNavigationContext.displayName = \"NavigationContext\";\n\nexport default NavigationContext;\n","import React, { useEffect } from \"react\";\nimport { createAction } from \"../../../utils/createAction\";\nimport NavigationContext from \"./Context\";\nimport { MAIN_MENU_API_URL } from \"../../../utils/api/constants\";\n\nexport const initialState = {\n  isLoading: true,\n  menuLinks: null,\n};\n\n// Actions\nconst request = () => createAction(\"request\");\nconst success = (menus) => createAction(\"success\", menus);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"request\":\n      return { ...state, isLoading: true };\n    case \"success\":\n      return {\n        ...state,\n        isLoading: false,\n        menuLinks: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst NavigationProvider = ({ children }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch(request());\n    fetch(MAIN_MENU_API_URL)\n      .then((res) => res.json())\n      .then((menus) => dispatch(success(menus)));\n  }, []);\n\n  if (!state.isLoading) {\n    return (\n      <NavigationContext.Provider value={state}>\n        {children}\n      </NavigationContext.Provider>\n    );\n  }\n  return <span>Loading all of this...</span>;\n};\n\nexport default NavigationProvider;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { Helmet } from \"react-helmet\";\n\nconst SeoHelmet = ({ seoData }) => {\n  return (\n    <Helmet>\n      <title>{seoData.metaTitle}</title>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta name=\"description\" content={seoData.metaDescription} />\n      <meta property=\"og:site_name\" content={seoData.metaTitle} />\n      <meta property=\"og:image\" content={seoData.ogImage} />\n      <meta property=\"og:locale\" content={seoData.locale} />\n      <meta property=\"og:title\" content={seoData.ogTitle} />\n      <meta property=\"og:description\" content={seoData.ogDescription} />\n      <meta property=\"twitter:image\" content={seoData.twitterImage} />\n      <meta property=\"twitter:title\" content={seoData.twitterTitle} />\n      <meta\n        property=\"twitter:description\"\n        content={seoData.twitterDescription}\n      />\n    </Helmet>\n  );\n};\n\n// SeoHelmet.defaultProps = {};\n\nSeoHelmet.propTypes = {};\n\nexport default SeoHelmet;\n","import { createContext } from \"react\";\n\nconst PageContext = createContext();\n\nPageContext.displayName = \"PageContext\";\n\nexport default PageContext;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { createAction } from \"../../utils/createAction\";\nimport PageContext from \"./Context\";\nimport { PAGES_API_URL } from \"../../utils/api/constants\";\n\nexport const initialState = {\n  isLoading: true,\n  pages: null,\n  currentPage: null,\n};\n\n// Actions\nconst request = () => createAction(\"request\");\nconst success = (pages) => createAction(\"success\", pages);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"request\":\n      return { ...state, isLoading: true };\n    case \"success\":\n      return {\n        ...state,\n        isLoading: false,\n        pages: {\n          bySlug: action.payload.reduce((acc, page) => {\n            acc[page.slug] = page;\n            return acc;\n          }, {}),\n          allIds: action.payload.map((page) => page.id),\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst PageProvider = ({ children }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch(request());\n    fetch(PAGES_API_URL)\n      .then((res) => res.json())\n      .then((pages) => dispatch(success(pages)));\n  }, []);\n\n  return <PageContext.Provider value={state}>{children}</PageContext.Provider>;\n};\n\nexport default PageProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const API_BASE = \"/ellen-lolck/wp-json/better-rest-endpoints/v1\";\nexport const PAGES_API_URL = `${API_BASE}/pages`;\nexport const API_PAGE_BY_SLUG = `${API_BASE}/pages?slug=`;\n\nexport const MAIN_MENU_API_URL = `${API_BASE}/menus/main`;\n","export const createAction = (type, payload, meta) => {\n  if (typeof payload === \"undefined\" && typeof meta === \"undefined\") {\n    return { type };\n  } else if (typeof meta === \"undefined\") {\n    return { type, payload };\n  } else {\n    return { type, payload, meta };\n  }\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst FrontPage = ({}) => {\n  return <div>Front Page</div>;\n};\n\n// FrontPage.defaultProps = {};\n\nFrontPage.propTypes = {};\n\nexport default FrontPage;\n","import React, { useEffect, useState, useContext } from \"react\";\n// import PropTypes from \"prop-types\";\n// import styled from \"styled-components\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport PageContext from \"../../context/Pages/Context\";\n\nconst Page = ({ slug, match }) => {\n  const history = useHistory();\n  const { isLoading, pages } = useContext(PageContext);\n  const [currentPage, setCurrentPage] = useState(null);\n\n  useEffect(() => {\n    if (pages && pages.bySlug[match.params.slug]) {\n      setCurrentPage({ ...pages.bySlug[match.params.slug] });\n    } else {\n      history.push(\"/not-found\");\n    }\n  }, [pages, match.params.slug]);\n\n  if (!isLoading && pages && currentPage) {\n    return (\n      <Container>\n        <Row>\n          <h1 className=\"header\">Page: {currentPage.title} </h1>\n          <div>{slug}</div>\n        </Row>\n      </Container>\n    );\n  }\n  return <span>Loading page...</span>;\n};\n\n// Page.defaultProps = {};\n\n// Page.propTypes = {};\n\nexport default Page;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst PageNotFound = () => {\n  return (\n    <div>\n      <h3>SIDEN KUNNE IKKE FINDES</h3>\n    </div>\n  );\n};\n\n// PageNotFound.defaultProps = {};\n\nPageNotFound.propTypes = {};\n\nexport default PageNotFound;\n"],"mappings":"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CA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;AC5IA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;ACJA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;A","sourceRoot":""}